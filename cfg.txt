<program>       ::= <declaration_list> <function_list>

<declaration_list> ::= <declaration> | <declaration> <declaration_list>

<declaration>  ::= <basic_declaration> | <user_defined_declaration>

<basic_declaration> ::= <basic_data_type> <identifier> = <literal>;

<basic_data_type> ::= int | float

<literal> ::= <integer_literal> | <float_literal>

<integer_literal> ::= <digit>+

<float_literal> ::= <digit>+ . <digit>+

<user_defined_declaration> ::= <struct_declaration> | <union_declaration> | <enum_declaration>

<struct_declaration> ::= struct <identifier> { <struct_members> };

<struct_members> ::= <declaration> | <declaration> <struct_members>

<union_declaration> ::= union <identifier> { <union_members> };

<union_members> ::= <declaration> | <declaration> <union_members>

<enum_declaration> ::= enum <identifier> { <enum_constants> };

<enum_constants> ::= <identifier> | <identifier> , <enum_constants>

<function_list> ::= <function> | <function> <function_list>

<function>     ::= <return_type> <identifier> ( <parameters> ) { <body> }

<return_type>  ::= <basic_data_type> | void

<parameters>   ::= <parameter_list> | void

<parameter_list> ::= <parameter> | <parameter> , <parameter_list>

<parameter>    ::= <basic_data_type> <identifier>

<body>         ::= <statement_list>

<statement_list> ::= <statement> | <statement> <statement_list>

<statement>    ::= <declaration> | <assignment> | <loop> | <function_call>

<assignment>   ::= <identifier> = <expression>;

<loop>         ::= for ( <assignment> ; <condition> ; <assignment> ) { <body> }

<condition>    ::= <expression> <relational_operator> <expression>

<relational_operator> ::= > | <

<expression>   ::= <term> | <term> <add_operator> <expression>

<term>         ::= <factor> | <factor> <add_operator> <term>

<factor>       ::= <identifier> | <literal>

<add_operator> ::= + | -

<function_call> ::= <identifier> ( <arguments> );

<arguments>    ::= <argument_list> | Îµ

<argument_list> ::= <expression> | <expression> , <argument_list>
